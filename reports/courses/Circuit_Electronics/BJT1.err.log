Traceback (most recent call last):
  File "E:\MainHomePage\.M_HomePage\Lib\site-packages\jupyter_cache\executors\utils.py", line 58, in single_nb_execution
    executenb(
  File "E:\MainHomePage\.M_HomePage\Lib\site-packages\nbclient\client.py", line 1314, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "E:\MainHomePage\.M_HomePage\Lib\site-packages\jupyter_core\utils\__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Dr\AppData\Local\Programs\Python\Python312\Lib\asyncio\base_events.py", line 687, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "E:\MainHomePage\.M_HomePage\Lib\site-packages\nbclient\client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "E:\MainHomePage\.M_HomePage\Lib\site-packages\nbclient\client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "E:\MainHomePage\.M_HomePage\Lib\site-packages\nbclient\client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import numpy as np
import matplotlib.pyplot as plt

import PySpice.Logging.Logging as Logging
logger = Logging.setup_logging()
from PySpice.Spice.Netlist import Circuit
from PySpice.Unit import *




circuit = Circuit('IV_2n2222')

circuit.BJT('1', 'collector', 'base', circuit.gnd, model='2n2222a')

# .MODEL 2n2222a npn
circuit.model('2n2222a', 'BJT', IS=3.88184e-14, BF=929.846, NF=1.10496, VAF=16.5003,
IKF=0.019539, ISE=1.0168e-11, NE=1.94752, BR=48.4545,
NR=1.07004, VAR=40.538, IKR=0.19539, ISC=1.0168e-11,
NC=4, RB=0.1, IRB=0.1, RBM=0.1,
RE=0.0001, RC=0.426673, XTB=0.1, XTI=1,
EG=1.05, CJE=2.23677e-11, VJE=0.582701, MJE=0.63466,
TF=4.06711e-10, XTF=3.92912, VTF=17712.6, ITF=0.4334,
CJC=2.23943e-11, VJC=0.576146, MJC=0.632796, XCJC=1,
FC=0.170253, CJS=0, VJS=0.75, MJS=0.5,
TR=1e-07, PTF=0, KF=0, AF=1
                   )

# Define sweep parameters
VAF=16.5003
Vinput_start = 0.0
Vinput_stop = VAF*0.004
Vinput_step = 0.0001

Vbase=circuit.V('input', '1', circuit.gnd, 0.45)
circuit.V('measin', '1', 'base', 0)
circuit.V('output', '3', circuit.gnd, 5)
circuit.V('measout', '3', 'collector', 0)

# Base voltage values to iterate through
# Generate base voltages with exponential steps for the first part and linear steps for the second part
# exp_start = 0.01
# exp_stop = 0.41
lin_start = 0.01
lin_stop = 0.45

# Number of steps
#exp_steps = 20
lin_steps = 10

# Exponential part
#exp_base_voltages = np.geomspace(exp_start, exp_stop, num=exp_steps)

# Linear part
lin_base_voltages = np.linspace(lin_start, lin_stop, num=lin_steps)

# Combine both parts
#base_voltages = np.concatenate((exp_base_voltages, lin_base_voltages))
base_voltages = lin_base_voltages


#base_voltages = np.linspace(0.1, 0.5, num=20)  # Adjust 'num' as needed

# Store results for plotting
collector_voltages = []
collector_currents = []
labels = []

# Loop through base voltage values
for Vbase_value in base_voltages:
    Vbase.dc_value = Vbase_value
    simulator = circuit.simulator(temperature=25, nominal_temperature=25)
    analysis = simulator.dc(Voutput=slice(Vinput_start, Vinput_stop, Vinput_step))
    waveform = analysis['collector']
    InputCurrentMeasurement = analysis['vmeasout']
    
    # Store results
    collector_voltages.append(np.array(waveform))
    collector_currents.append(InputCurrentMeasurement * 1000)  # Convert to mA
    labels.append(f'{Vbase_value:.2f}')  # Format to two decimal places for clarity


# Plot the results
plt.xscale('symlog', linthresh=1)
plt.yscale('symlog', linthresh=1)
for i in range(len(base_voltages)):
    plt.plot(collector_voltages[i], collector_currents[i], label=labels[i])
    # Annotate each curve with its label
    midpoint_index = len(collector_voltages[i]) // 2
    plt.annotate(labels[i], xy=(collector_voltages[i][midpoint_index], collector_currents[i][midpoint_index]), 
                 xytext=(5, 5), textcoords='offset points', fontsize=9, color='black')

plt.xlabel('Vcollector (V)')
plt.ylabel('Collector current (mA)')
plt.title('DC Sweep Analysis for Output-Characteristics of NPN Transistor')
plt.grid(True)
#plt.legend()
plt.show()

------------------


[1;31m---------------------------------------------------------------------------[0m
[1;31mModuleNotFoundError[0m                       Traceback (most recent call last)
Cell [1;32mIn[1], line 4[0m
[0;32m      1[0m [38;5;28;01mimport[39;00m [38;5;21;01mnumpy[39;00m [38;5;28;01mas[39;00m [38;5;21;01mnp[39;00m
[0;32m      2[0m [38;5;28;01mimport[39;00m [38;5;21;01mmatplotlib[39;00m[38;5;21;01m.[39;00m[38;5;21;01mpyplot[39;00m [38;5;28;01mas[39;00m [38;5;21;01mplt[39;00m
[1;32m----> 4[0m [38;5;28;01mimport[39;00m [38;5;21;01mPySpice[39;00m[38;5;21;01m.[39;00m[38;5;21;01mLogging[39;00m[38;5;21;01m.[39;00m[38;5;21;01mLogging[39;00m [38;5;28;01mas[39;00m [38;5;21;01mLogging[39;00m
[0;32m      5[0m logger [38;5;241m=[39m Logging[38;5;241m.[39msetup_logging()
[0;32m      6[0m [38;5;28;01mfrom[39;00m [38;5;21;01mPySpice[39;00m[38;5;21;01m.[39;00m[38;5;21;01mSpice[39;00m[38;5;21;01m.[39;00m[38;5;21;01mNetlist[39;00m [38;5;28;01mimport[39;00m Circuit

[1;31mModuleNotFoundError[0m: No module named 'PySpice'

